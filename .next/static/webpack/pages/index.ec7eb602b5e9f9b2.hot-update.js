"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./lib/firestore.ts":
/*!**************************!*\
  !*** ./lib/firestore.ts ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAllTeams: function() { return /* binding */ getAllTeams; },\n/* harmony export */   subscribeToTeams: function() { return /* binding */ subscribeToTeams; },\n/* harmony export */   updatePhysicalScore: function() { return /* binding */ updatePhysicalScore; }\n/* harmony export */ });\n/* harmony import */ var firebase_database__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/database */ \"./node_modules/firebase/database/dist/esm/index.esm.js\");\n/* harmony import */ var _firebase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./firebase */ \"./lib/firebase.ts\");\n/* harmony import */ var firebase_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! firebase/auth */ \"./node_modules/firebase/auth/dist/esm/index.esm.js\");\n// Firebase Realtime Database operations for AR Treasure Hunt Volunteer Page\n\n\n\n/**\n * Ensure user is authenticated before database operations\n */ async function ensureAuth() {\n    if (!_firebase__WEBPACK_IMPORTED_MODULE_1__.auth.currentUser) {\n        try {\n            await (0,firebase_auth__WEBPACK_IMPORTED_MODULE_2__.signInAnonymously)(_firebase__WEBPACK_IMPORTED_MODULE_1__.auth);\n        } catch (error) {\n            console.error(\"Failed to authenticate anonymously:\", error);\n            throw new Error(\"Authentication required\");\n        }\n    }\n}\n/**\n * Get session data for a team\n */ async function getTeamSession(uid) {\n    try {\n        // Try lowercase 'session' first (matches main code)\n        const sessionRef = (0,firebase_database__WEBPACK_IMPORTED_MODULE_0__.ref)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, \"\".concat(uid, \"/session\"));\n        const snapshot = await (0,firebase_database__WEBPACK_IMPORTED_MODULE_0__.get)(sessionRef);\n        if (snapshot.exists()) {\n            return snapshot.val();\n        }\n        // Fallback to uppercase 'Session' for backwards compatibility\n        const sessionRefUpper = (0,firebase_database__WEBPACK_IMPORTED_MODULE_0__.ref)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, \"\".concat(uid, \"/Session\"));\n        const snapshotUpper = await (0,firebase_database__WEBPACK_IMPORTED_MODULE_0__.get)(sessionRefUpper);\n        if (snapshotUpper.exists()) {\n            return snapshotUpper.val();\n        }\n        return null;\n    } catch (error) {\n        console.error(\"Error getting team session:\", error);\n        return null;\n    }\n}\n/**\n * Get all teams for the volunteer interface\n */ async function getAllTeams() {\n    try {\n        await ensureAuth();\n        const rootRef = (0,firebase_database__WEBPACK_IMPORTED_MODULE_0__.ref)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db);\n        const snapshot = await (0,firebase_database__WEBPACK_IMPORTED_MODULE_0__.get)(rootRef);\n        if (!snapshot.exists()) {\n            return [];\n        }\n        const allData = snapshot.val();\n        const teamsArray = [];\n        console.log(\"Raw Firebase data:\", allData);\n        // Filter only valid team nodes (those with teamName property)\n        for(const uid in allData){\n            if (allData[uid] && typeof allData[uid] === \"object\" && allData[uid].teamName) {\n                const rawTeamData = allData[uid];\n                console.log(\"Processing team \".concat(uid, \":\"), rawTeamData);\n                // Create team data without the Session node first\n                const teamData = {\n                    ...rawTeamData\n                };\n                teamData.uid = uid; // Ensure UID is set\n                // Ensure physicalScore and comment are included\n                teamData.physicalScore = teamData.physicalScore || 0;\n                teamData.physicalScoreComment = teamData.physicalScoreComment || \"\";\n                // Check if session data exists as a nested object (try multiple field names)\n                if (rawTeamData.session && typeof rawTeamData.session === \"object\") {\n                    console.log(\"Found session data for team \".concat(uid, \":\"), rawTeamData.session);\n                    teamData.session = rawTeamData.session;\n                } else if (rawTeamData.Session && typeof rawTeamData.Session === \"object\") {\n                    console.log(\"Found Session data (uppercase) for team \".concat(uid, \":\"), rawTeamData.Session);\n                    teamData.session = rawTeamData.Session;\n                } else {\n                    console.log(\"No session data found for team \".concat(uid, \", checking for alternative session data...\"));\n                    console.log(\"Available keys in team data:\", Object.keys(rawTeamData));\n                    // Check if there are any session-related fields directly on the team object\n                    const potentialSessionFields = [\n                        \"currentClueNumber\",\n                        \"cluesCompleted\",\n                        \"gameStarted\",\n                        \"started\",\n                        \"status\"\n                    ];\n                    const foundFields = {};\n                    let hasSessionData = false;\n                    for (const field of potentialSessionFields){\n                        if (rawTeamData[field] !== undefined) {\n                            foundFields[field] = rawTeamData[field];\n                            hasSessionData = true;\n                        }\n                    }\n                    if (hasSessionData) {\n                        console.log(\"Found session-related fields directly on team \".concat(uid, \":\"), foundFields);\n                        teamData.session = foundFields;\n                    } else {\n                        // Default session data for teams that haven't started\n                        teamData.session = {\n                            cluesCompleted: 0,\n                            currentClueNumber: 0,\n                            started: false,\n                            status: \"not_started\"\n                        };\n                    }\n                }\n                console.log(\"Final processed team data for \".concat(uid, \":\"), teamData);\n                teamsArray.push(teamData);\n            } else {\n                console.log(\"Skipping invalid team data for \".concat(uid, \":\"), allData[uid]);\n            }\n        }\n        // Sort by team number (ascending)\n        teamsArray.sort((a, b)=>a.teamNumber - b.teamNumber);\n        return teamsArray;\n    } catch (error) {\n        console.error(\"Error getting teams:\", error);\n        return [];\n    }\n}\n/**\n * Update a team's physical score with comment\n */ async function updatePhysicalScore(uid, physicalScore, comment) {\n    try {\n        await ensureAuth();\n        const teamRef = (0,firebase_database__WEBPACK_IMPORTED_MODULE_0__.ref)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, uid);\n        const snapshot = await (0,firebase_database__WEBPACK_IMPORTED_MODULE_0__.get)(teamRef);\n        if (!snapshot.exists()) {\n            throw new Error(\"Team not found with the provided UID\");\n        }\n        // Update the physical score and comment\n        const updateData = {\n            physicalScore: physicalScore\n        };\n        if (comment !== undefined) {\n            updateData.physicalScoreComment = comment;\n        }\n        await (0,firebase_database__WEBPACK_IMPORTED_MODULE_0__.update)(teamRef, updateData);\n        return true;\n    } catch (error) {\n        console.error(\"Error updating physical score:\", error);\n        throw error;\n    }\n}\n/**\n * Set up real-time listener for team updates\n */ function subscribeToTeams(callback) {\n    try {\n        const rootRef = (0,firebase_database__WEBPACK_IMPORTED_MODULE_0__.ref)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db);\n        console.log(\"Setting up Realtime Database listener for teams...\");\n        const unsubscribe = (0,firebase_database__WEBPACK_IMPORTED_MODULE_0__.onValue)(rootRef, (snapshot)=>{\n            console.log(\"Realtime Database snapshot received\");\n            if (!snapshot.exists()) {\n                console.log(\"No data found\");\n                callback([]);\n                return;\n            }\n            const allData = snapshot.val();\n            const teamsArray = [];\n            // Filter only valid team nodes (those with teamName property)\n            for(const uid in allData){\n                if (allData[uid] && typeof allData[uid] === \"object\" && allData[uid].teamName) {\n                    const rawTeamData = allData[uid];\n                    console.log(\"Real-time: Processing team \".concat(uid, \":\"), rawTeamData);\n                    // Create team data without the Session node first\n                    const teamData = {\n                        ...rawTeamData\n                    };\n                    teamData.uid = uid; // Ensure UID is set\n                    // Ensure physicalScore and comment are included\n                    teamData.physicalScore = teamData.physicalScore || 0;\n                    teamData.physicalScoreComment = teamData.physicalScoreComment || \"\";\n                    // Handle session data from the snapshot (try multiple field names)\n                    if (rawTeamData.session && typeof rawTeamData.session === \"object\") {\n                        console.log(\"Real-time: Found session data for team \".concat(uid, \":\"), rawTeamData.session);\n                        teamData.session = rawTeamData.session;\n                    } else if (rawTeamData.Session && typeof rawTeamData.Session === \"object\") {\n                        console.log(\"Real-time: Found Session data (uppercase) for team \".concat(uid, \":\"), rawTeamData.Session);\n                        teamData.session = rawTeamData.Session;\n                    } else {\n                        console.log(\"Real-time: No session data found for team \".concat(uid));\n                        console.log(\"Real-time: Available keys in team data:\", Object.keys(rawTeamData));\n                        // Check if there are any session-related fields directly on the team object\n                        const potentialSessionFields = [\n                            \"currentClueNumber\",\n                            \"cluesCompleted\",\n                            \"gameStarted\",\n                            \"started\",\n                            \"status\"\n                        ];\n                        const foundFields = {};\n                        let hasSessionData = false;\n                        for (const field of potentialSessionFields){\n                            if (rawTeamData[field] !== undefined) {\n                                foundFields[field] = rawTeamData[field];\n                                hasSessionData = true;\n                            }\n                        }\n                        if (hasSessionData) {\n                            console.log(\"Real-time: Found session-related fields directly on team \".concat(uid, \":\"), foundFields);\n                            teamData.session = foundFields;\n                        } else {\n                            // Default session data for teams that haven't started\n                            teamData.session = {\n                                cluesCompleted: 0,\n                                currentClueNumber: 0,\n                                started: false,\n                                status: \"not_started\"\n                            };\n                        }\n                    }\n                    console.log(\"Real-time: Final processed team data for \".concat(uid, \":\"), teamData);\n                    teamsArray.push(teamData);\n                } else {\n                    console.log(\"Real-time: Skipping invalid team data for \".concat(uid, \":\"), allData[uid]);\n                }\n            }\n            console.log(\"Teams data:\", teamsArray);\n            // Sort by team number (ascending)\n            teamsArray.sort((a, b)=>a.teamNumber - b.teamNumber);\n            callback(teamsArray);\n        }, (error)=>{\n            console.error(\"Realtime Database listener error:\", error);\n            callback([]);\n        });\n        // Return unsubscribe function\n        return ()=>{\n            console.log(\"Unsubscribing from Realtime Database listener\");\n            (0,firebase_database__WEBPACK_IMPORTED_MODULE_0__.off)(rootRef, \"value\", unsubscribe);\n        };\n    } catch (error) {\n        console.error(\"Error setting up Realtime Database listener:\", error);\n        return ()=>{};\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/firestore.ts\n"));

/***/ })

});